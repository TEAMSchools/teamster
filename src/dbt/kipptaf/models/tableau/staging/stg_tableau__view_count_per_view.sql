with
    deduplicate as (
        {{
            dbt_utils.deduplicate(
                relation=source("tableau", "src_tableau__view_count_per_view"),
                partition_by="id",
                order_by="extract_created desc",
            )
        }}
    ),

    view_count as (
        -- trunk-ignore(sqlfluff/AM04)
        select
            * except (
                comment_id,
                datasource_id,
                flow_id,
                hist_actor_site_id,
                hist_actor_user_id,
                hist_capability_id,
                hist_column_id,
                hist_comment_id,
                hist_config_id,
                hist_data_connection_id,
                hist_data_role_id,
                hist_database_id,
                hist_datasource_id,
                hist_flow_id,
                hist_group_id,
                hist_licensing_role_id,
                hist_metric_id,
                hist_project_id,
                hist_published_connection_id,
                hist_remote_agent_id,
                hist_schedule_id,
                hist_table_id,
                hist_tag_id,
                hist_target_site_id,
                hist_target_user_id,
                hist_task_id,
                hist_view_id,
                hist_workbook_id,
                historical_event_type_id,
                id_hist_projects,
                id_hist_sites,
                id_hist_users,
                id_hist_views,
                id_hist_workbooks,
                id,
                metric_id,
                number_of_records,
                project_id,
                remote_agent_id,
                revision_hist_views,
                revision_hist_workbooks,
                site_admin_level,
                site_id,
                site_role_id,
                sites_id,
                size_hist_workbooks,
                system_admin_level,
                system_user_id,
                type_id,
                tz_offset_days,
                user_id,
                view_id,
                workbook_id
            ),

            cast(comment_id as int) as comment_id,
            cast(datasource_id as int) as datasource_id,
            cast(flow_id as int) as flow_id,
            cast(hist_actor_site_id as int) as hist_actor_site_id,
            cast(hist_actor_user_id as int) as hist_actor_user_id,
            cast(hist_capability_id as int) as hist_capability_id,
            cast(hist_column_id as int) as hist_column_id,
            cast(hist_comment_id as int) as hist_comment_id,
            cast(hist_config_id as int) as hist_config_id,
            cast(hist_data_connection_id as int) as hist_data_connection_id,
            cast(hist_data_role_id as int) as hist_data_role_id,
            cast(hist_database_id as int) as hist_database_id,
            cast(hist_datasource_id as int) as hist_datasource_id,
            cast(hist_flow_id as int) as hist_flow_id,
            cast(hist_group_id as int) as hist_group_id,
            cast(hist_licensing_role_id as int) as hist_licensing_role_id,
            cast(hist_metric_id as int) as hist_metric_id,
            cast(hist_project_id as int) as hist_project_id,
            cast(hist_published_connection_id as int) as hist_published_connection_id,
            cast(hist_remote_agent_id as int) as hist_remote_agent_id,
            cast(hist_schedule_id as int) as hist_schedule_id,
            cast(hist_table_id as int) as hist_table_id,
            cast(hist_tag_id as int) as hist_tag_id,
            cast(hist_target_site_id as int) as hist_target_site_id,
            cast(hist_target_user_id as int) as hist_target_user_id,
            cast(hist_task_id as int) as hist_task_id,
            cast(hist_view_id as int) as hist_view_id,
            cast(hist_workbook_id as int) as hist_workbook_id,
            cast(historical_event_type_id as int) as historical_event_type_id,
            cast(id as int) as id,
            cast(id_hist_projects as int) as id_hist_projects,
            cast(id_hist_sites as int) as id_hist_sites,
            cast(id_hist_users as int) as id_hist_users,
            cast(id_hist_views as int) as id_hist_views,
            cast(id_hist_workbooks as int) as id_hist_workbooks,
            cast(metric_id as int) as metric_id,
            cast(number_of_records as int) as number_of_records,
            cast(project_id as int) as project_id,
            cast(remote_agent_id as int) as remote_agent_id,
            cast(site_admin_level as int) as site_admin_level,
            cast(site_id as int) as site_id,
            cast(site_role_id as int) as site_role_id,
            cast(sites_id as int) as sites_id,
            cast(size_hist_workbooks as int) as size_hist_workbooks,
            cast(system_admin_level as int) as system_admin_level,
            cast(system_user_id as int) as system_user_id,
            cast(type_id as int) as type_id,
            cast(user_id as int) as user_id,
            cast(view_id as int) as view_id,
            cast(workbook_id as int) as workbook_id,

            cast(revision_hist_views as numeric) as revision_hist_views,
            cast(revision_hist_workbooks as numeric) as revision_hist_workbooks,
            cast(tz_offset_days as numeric) as tz_offset_days,

            lower(user_name) as user_name_lower,

            concat(
                'https://tableau.kipp.org/t/KIPPNJ/views/', view_url, '?:embed=y'
            ) as `url`,

            parse_timestamp('%m/%d/%Y %I:%M:%S %p', created_at) as created_at_timestamp,
        from deduplicate
    )

select
    * except (created_at_local),

    datetime(created_at_timestamp, '{{ var("local_timezone") }}') as created_at_local,
from view_count
