from dagster import (
    AssetSelection,
    AutomationConditionSensorDefinition,
    Definitions,
    build_sensor_for_freshness_checks,
    load_assets_from_modules,
)
from dagster_k8s import k8s_job_executor

from teamster.code_locations.kipptaf import (
    CODE_LOCATION,
    DBT_PROJECT,
    _dbt,
    _google,
    adp,
    airbyte,
    amplify,
    asset_checks,
    datagun,
    deanslist,
    fivetran,
    ldap,
    overgrad,
    performance_management,
    powerschool,
    resources,
    schoolmint,
    smartrecruiters,
    tableau,
)
from teamster.core.resources import (
    BIGQUERY_RESOURCE,
    GCS_RESOURCE,
    OVERGRAD_RESOURCE,
    SLACK_RESOURCE,
    SSH_COUCHDROP,
    get_dbt_cli_resource,
    get_io_manager_gcs_avro,
    get_io_manager_gcs_file,
    get_io_manager_gcs_pickle,
)

defs = Definitions(
    executor=k8s_job_executor,
    assets=[
        *_google.asset_specs,
        *airbyte.asset_specs,
        *fivetran.asset_specs,
        *load_assets_from_modules(
            modules=[
                _dbt,
                _google,
                adp,
                amplify,
                datagun,
                deanslist,
                ldap,
                overgrad,
                performance_management,
                powerschool,
                schoolmint,
                smartrecruiters,
                tableau,
            ]
        ),
    ],
    asset_checks=asset_checks.freshness_checks,
    schedules=[
        *_google.schedules,
        *adp.schedules,
        *airbyte.schedules,
        *amplify.schedules,
        *datagun.schedules,
        *fivetran.schedules,
        *ldap.schedules,
        *schoolmint.schedules,
        *smartrecruiters.schedules,
        *tableau.schedules,
    ],
    sensors=[
        *_google.sensors,
        *adp.sensors,
        *deanslist.sensors,
        *fivetran.sensors,
        build_sensor_for_freshness_checks(
            freshness_checks=asset_checks.freshness_checks
        ),
        AutomationConditionSensorDefinition(
            name=f"{CODE_LOCATION}__automation_condition_sensor",
            asset_selection=AssetSelection.all(),
        ),
    ],
    resources={
        "adp_wfm": resources.ADP_WORKFORCE_MANAGER_RESOURCE,
        "adp_wfn": resources.ADP_WORKFORCE_NOW_RESOURCE,
        "airbyte": resources.AIRBYTE_CLOUD_RESOURCE,
        "db_bigquery": BIGQUERY_RESOURCE,
        "dbt_cli": get_dbt_cli_resource(DBT_PROJECT),
        "dds": resources.DIBELS_DATA_SYSTEM_RESOURCE,
        "fivetran": resources.FIVETRAN_RESOURCE,
        "gcs": GCS_RESOURCE,
        "google_directory": resources.GOOGLE_DIRECTORY_RESOURCE,
        "google_drive": resources.GOOGLE_DRIVE_RESOURCE,
        "google_forms": resources.GOOGLE_FORMS_RESOURCE,
        "gsheets": resources.GOOGLE_SHEETS_RESOURCE,
        "io_manager_gcs_avro": get_io_manager_gcs_avro(CODE_LOCATION),
        "io_manager_gcs_file": get_io_manager_gcs_file(CODE_LOCATION),
        "io_manager": get_io_manager_gcs_pickle(CODE_LOCATION),
        "ldap": resources.LDAP_RESOURCE,
        "mclass": resources.MCLASS_RESOURCE,
        "overgrad": OVERGRAD_RESOURCE,
        "ps_enrollment": resources.POWERSCHOOL_ENROLLMENT_RESOURCE,
        "schoolmint_grow": resources.SCHOOLMINT_GROW_RESOURCE,
        "slack": SLACK_RESOURCE,
        "smartrecruiters": resources.SMARTRECRUITERS_RESOURCE,
        "ssh_adp_workforce_now": resources.SSH_RESOURCE_ADP_WORKFORCE_NOW,
        "ssh_clever": resources.SSH_RESOURCE_CLEVER,
        "ssh_couchdrop": SSH_COUCHDROP,
        "ssh_coupa": resources.SSH_RESOURCE_COUPA,
        "ssh_deanslist": resources.SSH_RESOURCE_DEANSLIST,
        "ssh_egencia": resources.SSH_RESOURCE_EGENCIA,
        "ssh_idauto": resources.SSH_RESOURCE_IDAUTO,
        "ssh_illuminate": resources.SSH_RESOURCE_ILLUMINATE,
        "ssh_littlesis": resources.SSH_RESOURCE_LITTLESIS,
        "tableau": resources.TABLEAU_SERVER_RESOURCE,
    },
)
